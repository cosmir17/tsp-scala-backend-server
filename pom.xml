<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.seong</groupId>
    <artifactId>tsp-scala-backend-server</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>${project.artifactId}</name>
    <description>Travelling Salesman Problem Backend Application</description>
    <inceptionYear>2018</inceptionYear>
    <licenses>
        <license>
            <name>My License</name>
            <url>http://....</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <encoding>UTF-8</encoding>
        <scala.version>2.12.8</scala.version>
        <scala.compat.version>2.12</scala.compat.version>
        <log4j2.version>2.8.2</log4j2.version>
        <postgres.version>3.2.0</postgres.version>
        <akka.version>2.5.23</akka.version>
        <akkaHttp.version>10.1.8</akkaHttp.version>
        <cucumber.version>4.3.1</cucumber.version>
        <spec2.version>4.5.1</spec2.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-cluster-sharding-typed_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.typesafe.akka</groupId>
                    <artifactId>akka-distributed-data_2.12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-cluster-tools_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http_${scala.compat.version}</artifactId>
            <version>${akkaHttp.version}</version>
        </dependency>
        <dependency>
            <groupId>com.lightbend.akka</groupId>
            <artifactId>akka-management-cluster-http_${scala.compat.version}</artifactId>
            <version>0.6</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-persistence_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-persistence-query_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-persistence-typed_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>


        <dependency>
            <groupId>org.typelevel</groupId>
            <artifactId>cats-core_${scala.compat.version}</artifactId>
            <version>1.6.0</version>
        </dependency>
        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
            <version>3.4.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api-scala_${scala.compat.version}</artifactId>
            <version>11.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.11.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.11.2</version>
        </dependency>

        <!--<dependency>-->
            <!--<groupId>net.cakesolutions</groupId>-->
            <!--<artifactId>scala-kafka-client-akka_${scala.compat.version}</artifactId>-->
            <!--<version>2.0.0</version>-->
        <!--</dependency>-->

        <!-- Test -->
        <!--<dependency>-->
        <!--<groupId>junit</groupId>-->
        <!--<artifactId>junit</artifactId>-->
        <!--<version>4.12</version>-->
        <!--<scope>test</scope>-->
        <!--</dependency>-->
        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.compat.version}</artifactId>
            <version>3.0.7</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.specs2</groupId>
            <artifactId>specs2-core_${scala.compat.version}</artifactId>
            <version>${spec2.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.specs2</groupId>
            <artifactId>specs2-junit_${scala.compat.version}</artifactId>
            <version>${spec2.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.scalacheck</groupId>
            <artifactId>scalacheck_2.12</artifactId>
            <version>1.14.0</version>
            <scope>test</scope>
        </dependency>

        <!--<dependency>-->
        <!--<groupId>info.cukes</groupId>-->
        <!--<artifactId>cucumber-junit</artifactId>-->
        <!--<version>${cucumber.version}</version>-->
        <!--<scope>test</scope>-->
        <!--</dependency>-->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-scala_${scala.compat.version}</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-core</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>

        <!--<dependency>-->
            <!--<groupId>net.cakesolutions</groupId>-->
            <!--<artifactId>scala-kafka-client-testkit_${scala.compat.version}</artifactId>-->
            <!--<version>2.0.0</version>-->
            <!--<scope>test</scope>-->
        <!--</dependency>-->

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-testkit_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <sourceDirectory>src/main/scala</sourceDirectory>
        <testSourceDirectory>src/test/scala</testSourceDirectory>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
                <configuration>
                    <!-- Tests will be run with scalatest-maven-plugin instead -->
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest-maven-plugin</artifactId>
                <version>2.0.0</version>
                <configuration>
                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                    <junitxml>.</junitxml>
                    <filereports>TestSuiteReport.txt</filereports>
                    <!-- Comma separated list of JUnit test class names to execute -->
<!--                    <jUnitClasses>com.seong.tsp.backend.MainTest.scala</jUnitClasses>-->
                </configuration>
                <executions>
                    <execution>
                        <id>test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.seong.tsp.backend.Main</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.2</version>
                <configuration>
                    <systemPropertyVariables>
                        <config.mockserver.url>http://127.0.0.1</config.mockserver.url>
                    </systemPropertyVariables>
                    <includes>
                        <include>**/RunCukesIT.java</include>
                    </includes>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <!--<goal>test</goal>-->
                            <goal>verify</goal>
                            <goal>integration-test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.30.0</version>
                <configuration>
                    <images>

                        <image>
                            <name>wurstmeister/zookeeper</name>
                            <alias>zookeeper</alias>
                            <run>
                                <ports>
                                    <port>2181:2181</port>
                                </ports>

                                <wait>
                                    <tcp>
                                        <mode>mapped</mode>
                                        <ports>
                                            <port>2181</port>
                                        </ports>
                                    </tcp>
                                    <time>60000</time>
                                </wait>

                                <log>
                                    <enabled>true</enabled>
                                    <driver>
                                        <name>gelf</name>
                                        <opts>
                                            <tag>zookeeper</tag>
                                            <gelf-address>udp://localhost:12202</gelf-address>
                                        </opts>
                                    </driver>
                                </log>
                            </run>

                        </image>

                        <image>
                            <name>wurstmeister/kafka</name>
                            <alias>kafka</alias>
                            <run>
                                <ports>
                                    <port>9092:9092</port>
                                </ports>
                                <env>
                                    <TZ>GB</TZ>
                                    <KAFKA_ADVERTISED_HOST_NAME>kafka</KAFKA_ADVERTISED_HOST_NAME>
                                    <KAFKA_ZOOKEEPER_CONNECT>zookeeper:2181</KAFKA_ZOOKEEPER_CONNECT>
                                    <KAFKA_ADVERTISED_PORT>9092</KAFKA_ADVERTISED_PORT>
                                </env>

                                <wait>
                                    <tcp>
                                        <mode>mapped</mode>
                                        <ports>
                                        <port>9092</port>
                                        </ports>
                                    </tcp>
                                    <time>60000</time>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                    <driver>
                                        <name>gelf</name>
                                        <opts>
                                            <tag>kafka</tag>
                                            <gelf-address>udp://localhost:12202</gelf-address>
                                        </opts>
                                    </driver>
                                </log>
                                <links>
                                <link>zookeeper</link>
                                </links>
                            </run>
                        </image>

                        <image>
                            <name>elasticsearch</name>
                            <alias>elasticsearch</alias>
                            <run>
                                <ports>
                                    <port>9200:9200</port>
                                </ports>
                                <!--<memory>4073741824</memory>-->
                                <env>
                                    <TZ>GB</TZ>
                                    <!--<MAX_MAP_COUNT>400144</MAX_MAP_COUNT>-->
                                </env>
                                <wait>
                                    <tcp>
                                        <mode>mapped</mode>
                                        <ports>
                                            <port>9200</port>
                                        </ports>
                                    </tcp>
                                    <time>60000</time>
                                </wait>
                            </run>
                        </image>


                        <image>
                            <name>logstash</name>
                            <alias>logstash</alias>
                            <run>
                                <ports>
                                    <port>5044:5044</port>
                                    <port>12202:12201/udp</port>
                                </ports>
                                <!--<memory>4073741824</memory>-->
                                <links>
                                    <link>elasticsearch</link>
                                </links>
                                <env>
                                    <TZ>GB</TZ>
                                    <!--<MAX_MAP_COUNT>400144</MAX_MAP_COUNT>-->
                                </env>
                                <volumes>
                                    <bind>
                                        <volume>
                                            ${project.basedir}/config_files/logstash.conf:/config-dir/logstash.conf
                                        </volume>
                                    </bind>
                                </volumes>
                                <wait>
                                    <tcp>
                                        <mode>mapped</mode>
                                        <ports>
                                            <port>5044</port>
<!--                                            <port>12201</port>-->
                                        </ports>
                                    </tcp>
                                    <time>60000</time>
                                </wait>
                                <cmd>logstash -f /config-dir/logstash.conf</cmd>
                                <log>
                                    <enabled>true</enabled>
                                    <driver>
                                        <name>gelf</name>
                                        <opts>
                                            <tag>logstash</tag>
                                            <gelf-address>udp://localhost:12202</gelf-address>
                                        </opts>
                                    </driver>
                                </log>
                            </run>
                        </image>


                        <image>
                            <name>kibana</name>
                            <alias>kibana</alias>
                            <run>
                                <links>
                                    <link>elasticsearch</link>
                                </links>
                                <ports>
                                    <port>5601:5601</port>
                                </ports>
                                <!--<memory>4073741824</memory>-->
                                <env>
                                    <TZ>GB</TZ>
                                    <!--<MAX_MAP_COUNT>400144</MAX_MAP_COUNT>-->
                                </env>
                                <wait>
                                <tcp>
                                    <mode>mapped</mode>
                                <ports>
                                <port>5601</port>
                                </ports>
                                </tcp>
                                <time>60000</time>
                                </wait>

                                <log>
                                    <enabled>true</enabled>
                                    <!--<file>${project.basedir}/logs/tsp-scala-backend-server.log</file>-->
                                    <driver>
                                        <name>gelf</name>
                                        <opts>
                                            <tag>kafka</tag>
                                            <gelf-address>udp://localhost:12202</gelf-address>
                                        </opts>
                                    </driver>
                                </log>

                            </run>
                        </image>

                        <image>
                            <name>postgres</name>
                            <alias>postgres</alias>
                            <run>
                                <ports>
                                    <port>7000:8080</port>
                                </ports>
                                <hostname>postgres1</hostname>
                                <memory>1073741824</memory>
                                <env>
                                    <TZ>GB</TZ>
<!--                                    <MAX_HEAP_SIZE>512M</MAX_HEAP_SIZE>-->
<!--                                    <HEAP_NEWSIZE>170M</HEAP_NEWSIZE>-->
                                </env>
                                <links>
                                    <link>logstash</link>
                                </links>
                                <wait>
                                    <tcp>
                                        <mode>mapped</mode>
                                    <ports>
                                    <port>8080</port>
                                    </ports>
                                    </tcp>
                                    <time>40000</time>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                    <driver>
                                        <name>gelf</name>
                                        <opts>
                                            <tag>postgres</tag>
                                            <gelf-address>udp://localhost:12202</gelf-address>
                                        </opts>
                                    </driver>
                                </log>


                            </run>
                        </image>

                        <image>
                            <name>kamon/grafana_graphite</name>
                            <alias>grafana_graphite</alias>
                            <run>
                                <ports>
                                    <port>80:80</port>
                                    <port>81:81</port>
                                    <port>2003:2003</port>
                                </ports>
                                <env>
                                    <GF_INSTALL_PLUGINS>grafana-clock-panel,grafana-simple-json-datasource
                                    </GF_INSTALL_PLUGINS>
                                    <TZ>GB</TZ>
                                </env>
                                <links>
                                    <link>logstash</link>
                                </links>
                                <wait>
                                    <tcp>
                                        <mode>mapped</mode>
                                    <ports>
                                    <port>80</port>
                                    <port>81</port>
                                    <port>2003</port>
                                    </ports>
                                    </tcp>
                                    <time>50000</time>
                                </wait>
                                <volumes>
                                    <bind>
                                        <volume>
                                            ${project.basedir}/config_files/grafana:/config-dir/var/lib/grafana
                                        </volume>
                                    </bind>
                                </volumes>
                                <log>
                                    <enabled>true</enabled>
                                    <driver>
                                        <name>gelf</name>
                                        <opts>
                                            <tag>grafana_graphite</tag>
                                            <gelf-address>udp://localhost:12202</gelf-address>
                                        </opts>
                                    </driver>
                                </log>
                            </run>
                        </image>

                        <image>
                            <name>tsp-scala-backend-server</name>
                            <alias>tsp-scala-backend-server</alias>
                            <build>
                                <dockerFileDir>tsp-scala-backend-server</dockerFileDir>
                                <assembly>
                                    <descriptorRef>artifact</descriptorRef>
                                    <!--<permissions>ignore</permissions>-->
                                </assembly>
                            </build>
                            <run>
                                <ports>
                                    <port>8080:8080</port>
                                    <port>8008:8008</port>
                                </ports>
                                <env>
                                    <TZ>GB</TZ>
                                    <MAX_HEAP_SIZE>2g</MAX_HEAP_SIZE>
                                    <HEAP_NEWSIZE>500M</HEAP_NEWSIZE>
                                    <JAVA_OPTS>
                                        -Xdebug
                                        -Xrunjdwp:transport=dt_socket,address=8008,server=y,suspend=n
                                        <!-- -Dconfig.mockserver.url=http://mocks-->
                                        -Dconfig.postgres.url=postgres
                                        -Dconfig.graphite.url=grafana_graphite
                                        -DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
                                        -Dlogfolderpath=/var/log/tsp-scala-backend-server
                                    </JAVA_OPTS>
                                </env>
                                <!--<cmd>/bin/sh -c "while true; do echo My Message \$RANDOM; sleep 1; done;"</cmd>-->
                                <links>
                                    <link>postgres</link>
                                    <link>logstash</link>
                                    <link>grafana_graphite</link>
                                </links>
                                <wait>
                                    <tcp>
                                        <mode>mapped</mode>
                                    <ports>
                                    <port>8080</port>
                                    <port>8008</port>
                                    </ports>
                                    </tcp>
                                    <time>40000</time>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                    <!--<enabled>true</enabled>-->
                                    <!--<file>${project.basedir}/logs/tsp-scala-app.log</file>-->
                                    <driver>
                                        <name>gelf</name>
                                        <opts>
                                            <tag>tsp-scala-backend-server</tag>
                                            <gelf-address>udp://localhost:12202</gelf-address>
                                        </opts>
                                    </driver>
                                </log>
                            </run>
                        </image>

                    </images>
                </configuration>

                <executions>
                    <execution>
                        <id>build</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                            <goal>remove</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>
</project>
